{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Semiparametric SVM training using subgradients in Spark **\n",
    "\n",
    "#### bla, bla, bla. \n",
    "\n",
    "#### We will benchmark the algorithms with data files from UCI:\n",
    "\n",
    "* **Ripley**, the Ripley dataset\n",
    "* **Kwok**, the Kwok dataset\n",
    "* **Twonorm**, the Twonorm dataset\n",
    "* **Waveform**, the Waveform dataset\n",
    "* **Covertype**, the Covertype dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading Adult\n",
<<<<<<< HEAD
      "Dataset = Adult, modelo = SGMA_IRWLS, kfold = 0, Niter = 300, NC = 50\n",
      "Centroid 1 : Taking candidates, Evaluating ED, Max ED: 837.958151067 , Updating Matrices Time 1.61510801315\n",
      "Centroid 2 : Taking candidates, Evaluating ED, Max ED: 4.07960223648 , Updating Matrices Time 3.11538290977\n",
      "Centroid 3 : Taking candidates, Evaluating ED, Max ED: 0.743507292356 , Updating Matrices Time 2.24139308929\n",
      "Centroid 4 : Taking candidates, Evaluating ED, Max ED: 0.239909365387 , Updating Matrices Time 2.22568297386\n",
      "Centroid 5 : Taking candidates, Evaluating ED, Max ED: 0.214598081803 , Updating Matrices Time 2.28621912003\n",
      "Centroid 6 : Taking candidates, Evaluating ED, Max ED: 0.119007741921 , Updating Matrices Time 2.18365502357\n",
      "Centroid 7 : Taking candidates, Evaluating ED, Max ED: 0.0833892858356 , Updating Matrices Time 2.1710100174\n",
      "Centroid 8 : Taking candidates, Evaluating ED, Max ED: 0.0774284983686 , Updating Matrices Time 2.3789870739\n",
      "Centroid 9 : Taking candidates, Evaluating ED, Max ED: 0.0840695502442 , Updating Matrices Time 2.36207389832\n",
      "Centroid 10 : Taking candidates, Evaluating ED, Max ED: 0.0630676769141 , Updating Matrices Time 2.25631785393\n",
      "Centroid 11 : Taking candidates, Evaluating ED, Max ED: 0.042752086518 , Updating Matrices Time 2.25118398666\n",
      "Centroid 12 : Taking candidates, Evaluating ED, Max ED: 0.0556318511004 , Updating Matrices Time 1.9634449482\n",
      "Centroid 13 : Taking candidates, Evaluating ED, Max ED: 0.0325033735919 , Updating Matrices Time 2.09398984909\n",
      "Centroid 14 : Taking candidates, Evaluating ED, Max ED: 0.0400262473246 , Updating Matrices Time 2.09033989906\n",
      "Centroid 15 : Taking candidates, Evaluating ED, Max ED: 0.034403128843 , Updating Matrices Time 2.24467206001\n",
      "Centroid 16 : Taking candidates, Evaluating ED, Max ED: 0.0374538127241 , Updating Matrices Time 2.01764416695\n",
      "Centroid 17 : Taking candidates, Evaluating ED, Max ED: 0.0354660049352 , Updating Matrices Time 2.19269299507\n",
      "Centroid 18 : Taking candidates, Evaluating ED, Max ED: 0.0195143398555 , Updating Matrices Time 1.91293096542\n",
      "Centroid 19 : Taking candidates, Evaluating ED, Max ED: 0.0253683514411 , Updating Matrices Time 2.36063504219\n",
      "Centroid 20 : Taking candidates, Evaluating ED, Max ED: 0.0252485506808 , Updating Matrices Time 1.99020791054\n",
      "Centroid 21 : Taking candidates, Evaluating ED, Max ED: 0.024837380058 , Updating Matrices Time 2.07031798363\n",
      "Centroid 22 : Taking candidates, Evaluating ED, Max ED: 0.0144483438411 , Updating Matrices Time 2.13105106354\n",
      "Centroid 23 : Taking candidates, Evaluating ED, Max ED: 0.0202727678533 , Updating Matrices Time 2.13106703758\n",
      "Centroid 24 : Taking candidates, Evaluating ED, Max ED: 0.0116155615612 , Updating Matrices Time 1.96679592133\n",
      "Centroid 25 : Taking candidates, Evaluating ED, Max ED: 0.0102630987858 , Updating Matrices Time 1.92185688019\n",
      "Centroid 26 : Taking candidates, Evaluating ED, Max ED: 0.0109535316423 , Updating Matrices Time 1.91752505302\n",
      "Centroid 27 : Taking candidates, Evaluating ED, Max ED: 0.0153068851448 , Updating Matrices Time 2.35443091393\n",
      "Centroid 28 : Taking candidates, Evaluating ED, Max ED: 0.014208134676 , Updating Matrices Time 2.244617939\n",
      "Centroid 29 : Taking candidates, Evaluating ED, Max ED: 0.00702359135084 , Updating Matrices Time 2.23247694969\n",
      "Centroid 30 : Taking candidates, Evaluating ED, Max ED: 0.0140226404335 , Updating Matrices Time 2.13136696815\n",
      "Centroid 31 : Taking candidates, Evaluating ED, Max ED: 0.00828105125357 , Updating Matrices Time 2.06988787651\n",
      "Centroid 32 : Taking candidates, Evaluating ED, Max ED: 0.00590722065168 , Updating Matrices Time 2.1261920929\n",
      "Centroid 33 : Taking candidates, Evaluating ED, Max ED: 0.00807866746386 , Updating Matrices Time 2.2846019268\n",
      "Centroid 34 : Taking candidates, Evaluating ED, Max ED: 0.00441314158175 , Updating Matrices Time 2.05603790283\n",
      "Centroid 35 : Taking candidates, Evaluating ED, Max ED: 0.0058290984267 , Updating Matrices Time 2.15880489349\n",
      "Centroid 36 : Taking candidates, Evaluating ED, Max ED: 0.00490629134114 , Updating Matrices Time 2.12641000748\n",
      "Centroid 37 : Taking candidates, Evaluating ED, Max ED: 0.00610992506372 , Updating Matrices Time 2.00273489952\n",
      "Centroid 38 : Taking candidates, Evaluating ED, Max ED: 0.00442779490415 , Updating Matrices Time 2.20213198662\n",
      "Centroid 39 : Taking candidates, Evaluating ED, Max ED: 0.0041266474734 , Updating Matrices Time 1.93464803696\n",
      "Centroid 40 : Taking candidates, Evaluating ED, Max ED: 0.00362271548661 , Updating Matrices Time 2.15201592445\n",
      "Centroid 41 : Taking candidates, Evaluating ED, Max ED: 0.00245290284094 , Updating Matrices Time 1.96196889877\n",
      "Centroid 42 : Taking candidates, Evaluating ED, Max ED: 0.0037415119493 , Updating Matrices Time 2.28089499474\n",
      "Centroid 43 : Taking candidates, Evaluating ED, Max ED: 0.0024273706749 , Updating Matrices Time 2.18797707558\n",
      "Centroid 44 : Taking candidates, Evaluating ED, Max ED: 0.00571693090655 , Updating Matrices Time 2.24937105179\n",
      "Centroid 45 : Taking candidates, Evaluating ED, Max ED: 0.00207980548017 , Updating Matrices Time 2.30437493324\n",
      "Centroid 46 : Taking candidates, Evaluating ED, Max ED: 0.00239948472312 , Updating Matrices Time 2.44801402092\n",
      "Centroid 47 : Taking candidates, Evaluating ED, Max ED: 0.00196104358818 , Updating Matrices Time 2.30768299103\n",
      "Centroid 48 : Taking candidates, Evaluating ED, Max ED: 0.00164817971078 , Updating Matrices Time 2.45159578323\n",
      "Centroid 49 : Taking candidates, Evaluating ED, Max ED: 0.00266862979615 , Updating Matrices Time 2.25922513008\n",
      "Centroid 50 : Taking candidates, Evaluating ED, Max ED: 0.00186387248501 , Updating Matrices Time 2.32518792152\n",
      "Iteration 1 : DeltaW/W inf , Iteration Time 0.92423915863\n",
      "Iteration 2 : DeltaW/W 0.334803202028 , Iteration Time 0.465341806412\n",
      "Iteration 3 : DeltaW/W 0.202889766605 , Iteration Time 0.597721099854\n",
      "Iteration 4 : DeltaW/W 0.138725295495 , Iteration Time 0.426893949509\n",
      "Iteration 5 : DeltaW/W 0.108054050534 , Iteration Time 0.433562994003\n",
      "Iteration 6 : DeltaW/W 0.116673390734 , Iteration Time 0.524209022522\n",
      "Iteration 7 : DeltaW/W 0.110624549016 , Iteration Time 0.549924850464\n",
      "Iteration 8 : DeltaW/W 0.0913002209975 , Iteration Time 0.582854986191\n",
      "Iteration 9 : DeltaW/W 0.102242073351 , Iteration Time 0.602288961411\n",
      "Iteration 10 : DeltaW/W 0.080193749943 , Iteration Time 0.420187950134\n",
      "Iteration 11 : DeltaW/W 0.0763689126978 , Iteration Time 0.465397119522\n",
      "Iteration 12 : DeltaW/W 0.0678242097954 , Iteration Time 0.395921945572\n",
      "Iteration 13 : DeltaW/W 0.06469621374 , Iteration Time 0.414540052414\n",
      "Iteration 14 : DeltaW/W 0.0489825714457 , Iteration Time 0.406373023987\n",
      "Iteration 15 : DeltaW/W 0.0401026503183 , Iteration Time 0.521511077881\n",
      "Iteration 16 : DeltaW/W 0.0325575459719 , Iteration Time 0.533713102341\n",
      "Iteration 17 : DeltaW/W 0.0270584190312 , Iteration Time 0.563796043396\n",
      "Iteration 18 : DeltaW/W 0.0207826727536 , Iteration Time 0.51926112175\n",
      "Iteration 19 : DeltaW/W 0.0200786206806 , Iteration Time 0.532185077667\n",
      "Iteration 20 : DeltaW/W 0.0159420076581 , Iteration Time 0.531127929688\n",
      "Iteration 21 : DeltaW/W 0.0137661726069 , Iteration Time 0.554703950882\n",
      "Iteration 22 : DeltaW/W 0.00987159904309 , Iteration Time 0.509769916534\n",
      "Iteration 23 : DeltaW/W 0.00778919887298 , Iteration Time 0.435159921646\n",
      "Iteration 24 : DeltaW/W 0.00702163314564 , Iteration Time 0.481508016586\n",
      "Iteration 25 : DeltaW/W 0.00629030628094 , Iteration Time 0.529648065567\n",
      "Iteration 26 : DeltaW/W 0.00511052690846 , Iteration Time 0.513878107071\n",
      "Iteration 27 : DeltaW/W 0.00439171580984 , Iteration Time 0.529666900635\n",
      "Iteration 28 : DeltaW/W 0.00382969505866 , Iteration Time 0.517766952515\n",
      "Iteration 29 : DeltaW/W 0.00322685795038 , Iteration Time 0.561576843262\n",
      "Iteration 30 : DeltaW/W 0.00300422370845 , Iteration Time 0.565108060837\n",
      "Iteration 31 : DeltaW/W 0.00278122383094 , Iteration Time 0.532766819\n",
      "Iteration 32 : DeltaW/W 0.00260428672351 , Iteration Time 0.416247844696\n",
      "Iteration 33 : DeltaW/W 0.00242493805992 , Iteration Time 0.544300079346\n",
      "Iteration 34 : DeltaW/W 0.0022316993977 , Iteration Time 0.520792007446\n",
      "Iteration 35 : DeltaW/W 0.00199310954606 , Iteration Time 0.409438848495\n",
      "Iteration 36 : DeltaW/W 0.00179740185279 , Iteration Time 0.525302886963\n",
      "Iteration 37 : DeltaW/W 0.00144965701155 , Iteration Time 0.515102148056\n",
      "Iteration 38 : DeltaW/W 0.00125653796751 , Iteration Time 0.529449224472\n",
      "Iteration 39 : DeltaW/W 0.00112318221885 , Iteration Time 0.412034988403\n",
      "Iteration 40 : DeltaW/W 0.00101198819082 , Iteration Time 0.399868011475\n",
      "Dataset = Adult, modelo = SGMA_IRWLS, kfold = 0, Niter = 300, NC = 50\n",
      "AUCtr = 0.899141, AUCval = 0.898130, AUCtst = 0.899141\n",
      "Elapsed minutes = 2.904002\n"
     ]
    },
    {
     "ename": "IOError",
     "evalue": "[Errno 2] No such file or directory: './results/dataset_4_modelo_SGMA_IRWLS_NC_50_Niter_300_kfold_0.pkl'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIOError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-4f72b78f1060>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    173\u001b[0m                         \u001b[1;32mprint\u001b[0m \u001b[1;34m\"Elapsed minutes = %f\"\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mexe_time\u001b[0m \u001b[1;33m/\u001b[0m \u001b[1;36m60.0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    174\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 175\u001b[1;33m                         \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'w'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    176\u001b[0m                             \u001b[0mpickle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mauc_tr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mauc_val\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mauc_tst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexe_time\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIOError\u001b[0m: [Errno 2] No such file or directory: './results/dataset_4_modelo_SGMA_IRWLS_NC_50_Niter_300_kfold_0.pkl'"
=======
      "Dataset = Adult, modelo = LinearSVM, kfold = 0, Niter = 300, NC = 200\n",
      "Dataset = Adult, modelo = LinearSVM, kfold = 0, Niter = 300, NC = 200\n",
      "AUCtr = 0.716469, AUCval = 0.715439, AUCtst = 0.715977\n",
      "Elapsed minutes = 0.748236\n"
>>>>>>> navia
     ]
    }
   ],
   "source": [
    "# definir variable de usuario y ejecutar condicionalmente cualquier código que dependa del contexto de ejecución\n",
    "# no borrar código, simplemente ejecutarlo o no con un \"if\"\n",
    "# cada uno mantiene actualizada su parte del \"if\" y no toca la del otro\n",
    "\n",
    "user = 'navia'\n",
    "#user = 'roberto'\n",
    "\n",
    "#modelo = 'hybrid' \n",
    "#modelo = 'kernelgrad' \n",
    "overwrite_results = True # overwrites results even when the result file exists, skips the execution otherwise\n",
    "\n",
    "if user == 'roberto':\n",
    "    # definir sc\n",
    "    import findspark\n",
    "    findspark.init()\n",
    "    from pyspark import SparkConf, SparkContext\n",
    "    conf = (SparkConf().setMaster(\"local[4]\").setAppName(\"My app\").set(\"spark.executor.memory\", \"2g\"))\n",
    "    sc = SparkContext(conf = conf)\n",
    "    import common.lib.svm_utils as SVM_UTILS\n",
    "    import numpy as np\n",
    "    from pyspark.mllib.regression import LabeledPoint\n",
    "    import pickle\n",
    "    from math import sqrt\n",
    "    %matplotlib inline\n",
    "    # Se importan las funciones\n",
    "    from pyspark.mllib.util import MLUtils\n",
    "    from common.lib.IRWLSUtils import *\n",
    "    Npartitions = 12\n",
    "    Samplefraction = 0.05\n",
    "\n",
    "if user == 'navia':\n",
    "    sc.addPyFile(\"file:///export/usuarios01/navia/spark/SVM_spark/common/lib/svm_utils.py\")\n",
    "    sc.addPyFile(\"file:///export/usuarios01/navia/spark/SVM_spark/common/lib/IRWLSUtils.py\")   \n",
    "    sc.addPyFile(\"file:///export/usuarios01/navia/spark/SVM_spark/common/lib/KernelUtils.py\")   \n",
    "    sc.addPyFile(\"file:///export/usuarios01/navia/spark/SVM_spark/common/lib/ResultsUtils.py\")   \n",
    "    sc.addPyFile(\"file:///export/usuarios01/navia/spark/SVM_spark/common/lib/SGMAUtils.py\")   \n",
    "    import svm_utils as SVM_UTILS\n",
    "    #from SGMAUtils import SGMA\n",
    "    from IRWLSUtils import loadFile, train_SGMA_IRWLS, train_random_IRWLS, train_hybrid_SGMA_IRWLS, train_kmeans_IRWLS\n",
    "    #from ResultsUtils import compute_AUCs\n",
    "    import numpy as np\n",
    "    from pyspark.mllib.regression import LabeledPoint\n",
    "    from pyspark.mllib.linalg import SparseVector, DenseVector\n",
    "    import pickle\n",
    "    from math import sqrt\n",
    "    from pyspark.mllib.util import MLUtils\n",
    "    %matplotlib inline\n",
    "    Npartitions = -99 # cuando es menor que 0, no se aplica y se deja libre\n",
    "    Samplefraction = 0.05\n",
    "\n",
    "# 0 = Ripley\n",
    "# 1 = Kwok\n",
    "# 2 = Twonorm\n",
    "# 3 = Waveform\n",
    "# 4 = Adult\n",
    "# 5 = SUSY\n",
    "# 6 = KddCup1999, requiere preprocesado...\n",
    "# 7 = Higgs\n",
    "\n",
    "datasets = [0, 1, 2, 3, 4, 5, 6]\n",
    "folds = [0, 1, 2, 3, 4]\n",
    "dataset_names = ['Ripley', 'Kwok', 'Twonorm', 'Waveform', 'Adult', 'Susy', 'KddCup1999', 'Higgs']\n",
    "Niters = [50, 100, 200]\n",
    "NCs = [5, 10, 25, 50, 100, 200]\n",
    "modelos = ['hybridgrad', 'kernelgrad', 'SGMA_IRWLS', 'LinearSVM', 'Logistic', 'random_IRWLS', 'hybrid_IRWLS', 'Kmeans_IRWLS']\n",
    "\n",
    "datasets = [4]\n",
    "folds = [0]\n",
    "modelos = ['LinearSVM']\n",
    "Niters = [300]\n",
    "NCs = [50]\n",
    "Samplefraction = 0.05\n",
    "fsigma = 1.0\n",
    "\n",
    "for modelo in modelos:\n",
    "    for kdataset in datasets:\n",
    "        for kfold in folds:\n",
    "            for Niter in Niters:\n",
    "                C = 100.0\n",
    "                name_dataset = dataset_names[kdataset]\n",
    "                \n",
    "                #####################################################################################################################\n",
    "                # DATA LOADING: the result of this part must always be three RDDs for train, val and test, containing labelled points.\n",
    "                #####################################################################################################################\n",
    "                if kdataset in [0, 1, 2, 3]: # loading from .mat\n",
    "                    x_tr, y_tr, x_val, y_val, x_tst, y_tst = SVM_UTILS.load_data(kdataset, kfold)\n",
    "                    NI = x_tr.shape[1]\n",
    "                    sigma = fsigma * sqrt(NI)\n",
    "                    \n",
    "                    #Npartitions = 65\n",
    "                    \n",
    "                    if Npartitions > 0:\n",
    "                        XtrRDD = sc.parallelize(np.hstack((y_tr, x_tr)), Npartitions).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                        XvalRDD = sc.parallelize(np.hstack((y_val, x_val)), Npartitions).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                        XtstRDD = sc.parallelize(np.hstack((y_tst, x_tst)), Npartitions).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                    else:\n",
    "                        XtrRDD = sc.parallelize(np.hstack((y_tr, x_tr))).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                        XvalRDD = sc.parallelize(np.hstack((y_val, x_val))).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                        XtstRDD = sc.parallelize(np.hstack((y_tst, x_tst))).map(lambda x: LabeledPoint(x[0], x[1:]))\n",
    "                       \n",
    "                        \n",
    "                if kdataset in [4]: # loading libsvm format\n",
    "                    if kdataset == 4:\n",
    "                        dimensions = 123                       \n",
    "                    print \"Loading \" + name_dataset\n",
    "                    XtrRDD = loadFile('./data/' + name_dataset.lower() + '_train',sc,dimensions,Npartitions)\n",
    "                    XvalRDD = loadFile('./data/' + name_dataset.lower() + '_val',sc,dimensions,Npartitions)\n",
    "                    XtstRDD = loadFile('./data/' + name_dataset.lower() + '_test',sc,dimensions,Npartitions)\n",
    "                    sigma = fsigma * np.sqrt(dimensions)\n",
    "                    \n",
    "                if kdataset in [5]: # loading in libsvm format and splitting RDD\n",
    "                    if kdataset == 5:\n",
    "                        filename = 'file:///export/usuarios01/navia/spark/SVM_spark/data/SUSY.txt'\n",
    "                        #filename = 'file:///export/usuarios01/navia/spark/SVM_spark/data/minisusy.txt'\n",
    "                        dimensions = 18\n",
    "                    rawdata = MLUtils.loadLibSVMFile(sc, filename)\n",
    "                    # Labelled points are sparse, we map the values\n",
    "                    rawdata = rawdata.map(lambda x: LabeledPoint(x.label, DenseVector((x.features).toArray())  ))\n",
    "                    XtrRDD, XvalRDD, XtstRDD = rawdata.randomSplit(weights=[0.7, 0.1, 0.2], seed=1234)\n",
    "                    sigma = fsigma * np.sqrt(dimensions)\n",
    "\n",
    "                if kdataset in [7]: # loading as text, transforming to labelledpoint and splitting RDD into train, val and test\n",
    "                    if kdataset == 7:\n",
    "                        \n",
    "                        filename = 'file:///export/g2pi/SPARK/data/higgs_tr.txt'\n",
    "                        XtrRDD = sc.textFile(filename)\n",
    "                        XtrRDD = XtrRDD.map(SVM_UTILS.text2labeled)\n",
    "\n",
    "                        filename = 'file:///export/g2pi/SPARK/data/higgs_val.txt'\n",
    "                        XvalRDD = sc.textFile(filename)\n",
    "                        XvalRDD = XvalRDD.map(SVM_UTILS.text2labeled)\n",
    "                                                \n",
    "                        filename = 'file:///export/g2pi/SPARK/data/higgs_tst.txt'\n",
    "                        XtstRDD = sc.textFile(filename)\n",
    "                        XtstRDD = XtstRDD.map(SVM_UTILS.text2labeled)\n",
    "                        sigma = fsigma * np.sqrt(len(XtstRDD.take(1)[0].features))\n",
    "\n",
    "                        XtrRDD.cache()\n",
    "                        XvalRDD.cache()\n",
    "                        XtstRDD.cache()\n",
    "\n",
    "                #################################   END LOADING DATA ##########################################################\n",
    "                \n",
    "                for NC in NCs:\n",
    "                    print \"Dataset = %s, modelo = %s, kfold = %d, Niter = %d, NC = %d\" % (name_dataset, modelo, kfold, Niter, NC)\n",
    "                    filename = './results/dataset_' + str(kdataset) + '_modelo_' + modelo + '_NC_' + str(NC) + '_Niter_' + str(Niter) + '_kfold_' + str(kfold) + '.pkl'\n",
    "                    #import code\n",
    "                    #code.interact(local=locals())\n",
    "                    try:\n",
    "                        f = open(filename,'r')\n",
    "                        f.close()\n",
    "                        file_exists = True\n",
    "                    except:\n",
    "                        file_exists = False\n",
    "                        pass\n",
    "                    execute = False\n",
    "                    if file_exists:\n",
    "                        if overwrite_results:\n",
    "                            execute = True\n",
    "                    else:\n",
    "                        execute = True                                  \n",
    "                    if execute:\n",
    "\n",
    "                        if modelo == 'hybridgrad':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = SVM_UTILS.train_hybridSVM(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter, Samplefraction)\n",
    "\n",
    "                        if modelo == 'kernelgrad':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = SVM_UTILS.train_kernelgrad(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter, Samplefraction)\n",
    "\n",
    "                        if modelo == 'SGMA_IRWLS':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = train_SGMA_IRWLS(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter)\n",
    "\n",
    "                        if modelo == 'LinearSVM':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = SVM_UTILS.train_linear_SVM(XtrRDD, XvalRDD, XtstRDD)\n",
    "                                                \n",
    "                        if modelo == 'Logistic':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = SVM_UTILS.train_logistic(XtrRDD, XvalRDD, XtstRDD)\n",
    "\n",
    "                        if modelo == 'random_IRWLS':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = train_random_IRWLS(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter)\n",
    "\n",
    "                        if modelo == 'hybrid_IRWLS':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = train_hybrid_SGMA_IRWLS(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter)\n",
    "\n",
    "                        if modelo == 'Kmeans_IRWLS':\n",
    "                            auc_tr, auc_val, auc_tst, exe_time = train_kmeans_IRWLS(XtrRDD, XvalRDD, XtstRDD, sigma, C, NC, Niter)\n",
    "\n",
    "                        print \"Dataset = %s, modelo = %s, kfold = %d, Niter = %d, NC = %d\" % (name_dataset, modelo, kfold, Niter, NC)\n",
    "                        print \"AUCtr = %f, AUCval = %f, AUCtst = %f\" % (auc_tr, auc_val, auc_tst)\n",
    "                        print \"Elapsed minutes = %f\" % (exe_time / 60.0)\n",
    "\n",
    "                        with open(filename, 'w') as f:\n",
    "                            pickle.dump([auc_tr, auc_val, auc_tst, exe_time], f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.1"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fsigma"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
